C51 COMPILER V9.06   SOLAR                                                                 04/19/2015 18:45:07 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE SOLAR
OBJECT MODULE PLACED IN solar.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE solar.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg51.H>
   2          sfr ldata = 0xB0;            //P3 = LCD data pins
   3          sbit rs = P2^3;
   4          sbit rw = P2^4;
   5          sbit en = P2^5;
   6          
   7          // start of ADC  group
   8          sbit wr = P2^0;               //START 
   9          sbit intr=P2^1;                //EOC 
  10          sbit rd = P2^2;                //output enable 
  11          // end of ADC group
  12          
  13          unsigned char  present_sample,previous_sample;
  14          unsigned char  x; 
  15          unsigned char  up_sample,down_sample,mid_sample;  
  16          
  17          code unsigned char line1[16]=" Solar Tracking ";
  18          code unsigned char line2[16]="--developed by--";
  19          code unsigned char line3[16]=" Neel Dhrumit";
  20          code unsigned char line4[16]=" Meet Ankit";  
  21          
  22          
  23          
  24          void lcdcmd (unsigned char value);
  25          void lcddata (unsigned char value);
  26          void msdelay (unsigned int itime);
  27          
  28          void inputting();
  29          
  30          code unsigned char stepper_code[4]={0xfe,0xfb,0xfd,0xf7};
  31          
  32          signed char step;
  33          unsigned char k;
  34          
  35           
  36          void msdelay (unsigned int itime)
  37          {
  38   1              unsigned int i,j;
  39   1              for(i=0; i<itime; i++)
  40   1              {
  41   2                      for(j=0; j<100; j++)
  42   2                      {;}                 // no operation
  43   2              }
  44   1      
  45   1              return;
  46   1      }
  47          
  48          void lcdcmd (unsigned char value)
  49          {
  50   1              ldata = value;          // put value on the pins
  51   1              rs = 1;
  52   1              rw = 0;
  53   1              en = 1;                 // strobe the enable pin
  54   1              msdelay(1);
  55   1              en = 0;
C51 COMPILER V9.06   SOLAR                                                                 04/19/2015 18:45:07 PAGE 2   

  56   1              return;
  57   1      }
  58          
  59          
  60          void lcddata (unsigned char value)
  61          {
  62   1              ldata = value;          // put the value on the pins
  63   1              rs = 0; 
  64   1              rw = 0;
  65   1              en = 1;                 // strobe the enable pin
  66   1              msdelay(1);
  67   1              en = 0;
  68   1              return;
  69   1      }
  70          
  71          
  72          void inputting()
  73          {       
  74   1                //Code for ADC input
  75   1                  P0 = 0xFF;
  76   1              intr = 1;
  77   1              rd = 1;
  78   1              wr = 1;
  79   1              msdelay(1);
  80   1              wr=0;
  81   1              msdelay(1);
  82   1              wr = 1; 
  83   1              while(intr == 1);
  84   1              msdelay(10);             // this delay is to allow completion of ADC process
  85   1              rd = 0;
  86   1              msdelay(1);
  87   1              rd = 1;  
  88   1              x = P0;
  89   1               
  90   1               return;
  91   1      }
  92          
  93          
  94          
  95          
  96          
  97          void main (void)
  98          {
  99   1              lcdcmd(0x38);                        // 2 line & 5*7 matrix
 100   1              msdelay(1);
 101   1              lcdcmd(0x0C);                // display on cursor off
 102   1              msdelay(1);
 103   1              lcdcmd(0x01);                        // clear display screen
 104   1              msdelay(1);
 105   1          
 106   1              lcdcmd(0x80);                         // line 1, position 0
 107   1              msdelay(1);
 108   1      
 109   1              for(k=0;k<16;k++)
 110   1              {
 111   2                      lcddata(line1[k]);
 112   2                      msdelay(1);
 113   2              }
 114   1      
 115   1              lcdcmd(0xC0);           // line 2, position 0
 116   1              msdelay(1);
 117   1      
C51 COMPILER V9.06   SOLAR                                                                 04/19/2015 18:45:07 PAGE 3   

 118   1              for(k=0;k<16;k++)
 119   1              {
 120   2                      lcddata(line2[k]);
 121   2                      msdelay(1);
 122   2              }
 123   1      
 124   1              msdelay(10000);
 125   1      
 126   1              lcdcmd(0x80);                        // line 1, position 0
 127   1              msdelay(1);
 128   1      
 129   1              for(k=0;k<16;k++)
 130   1              {
 131   2                      lcddata(line3[k]);
 132   2                      msdelay(1);
 133   2              }
 134   1      
 135   1      
 136   1      
 137   1      
 138   1      
 139   1      
 140   1              lcdcmd(0xC0);            // line 2, position 0
 141   1              msdelay(1);
 142   1      
 143   1              for(k=0;k<16;k++)
 144   1              {
 145   2                      lcddata(line4[k]);
 146   2                      msdelay(1);
 147   2              }
 148   1      
 149   1              msdelay(10000);
 150   1      
 151   1              lcdcmd(0x80);                         // line 1, position 0
 152   1              msdelay(1);
 153   1      
 154   1              
 155   1      
 156   1              msdelay(10000);
 157   1      
 158   1      
 159   1              present_sample = previous_sample = 0;
 160   1              P1=0xFF;
 161   1          step = 0;
 162   1              
 163   1              P1 = stepper_code[step];                                   // panel rotate
 164   1              msdelay(1000);
 165   1              inputting();
 166   1          previous_sample = x;
 167   1      
 168   1      
 169   1      
 170   1      
 171   1      
 172   1      
 173   1      
 174   1              while(1)
 175   1              {
 176   2              
 177   2                      step++;
 178   2                      if( step > 3)
 179   2                      {
C51 COMPILER V9.06   SOLAR                                                                 04/19/2015 18:45:07 PAGE 4   

 180   3                               step = 0;
 181   3                                      P1 = stepper_code[step]; // panel rotate
 182   3                                      msdelay(3000);
 183   3                                   inputting();
 184   3                                      up_sample = x;
 185   3                                      
 186   3                                      step--;
 187   3                      }
 188   2                                      
 189   2                      if( step < 0){
 190   3                                       step = 3;
 191   3                                      P1 = stepper_code[step]; // panel rotate
 192   3                                      msdelay(3000);
 193   3                              inputting();
 194   3                                      mid_sample = x;
 195   3                                      
 196   3                      step--;
 197   3                      }
 198   2                                      
 199   2      if( step < 0){
 200   3                                       step = 3;
 201   3                                      P1 = stepper_code[step]; // panel rotate
 202   3                                      msdelay(3000);
 203   3                              inputting();
 204   3                                      down_sample = x;
 205   3                                      
 206   3                      step++;
 207   3                      }
 208   2                                      
 209   2      if( step > 3){
 210   3                                       step = 0;
 211   3                                      P1 = stepper_code[step]; // panel rotate
 212   3                                      msdelay(3000);
 213   3                              inputting();
 214   3                                      previous_sample = x;
 215   3                                                                      }
 216   2      
 217   2      
 218   2      
 219   2      
 220   2      
 221   2      
 222   2      
 223   2        else if(up_sample > mid_sample)
 224   2                                           { 
 225   3                                      
 226   3                              LOOP1:
 227   3                                      step++;
 228   3                                      if( step > 3)
 229   3                                       step = 0;
 230   3                                           P1 = stepper_code[step];
 231   3                                      msdelay(3000);
 232   3                              inputting();
 233   3                                      present_sample = x;
 234   3                              
 235   3                              if(present_sample > previous_sample)
 236   3                                      {
 237   4      previous_sample = present_sample;
 238   4                                              goto  LOOP1;
 239   4                                           }
 240   3                              else
 241   3                                      {
C51 COMPILER V9.06   SOLAR                                                                 04/19/2015 18:45:07 PAGE 5   

 242   4                                              step--;
 243   4                                              if( step < 0)
 244   4                                              step = 3;
 245   4                                              P1 = stepper_code[step]; // panel rotate
 246   4                                              msdelay(3000);
 247   4                                      inputting();
 248   4                                              previous_sample = x;
 249   4                                      }
 250   3      
 251   3                                  }
 252   2      
 253   2                             else if(down_sample > mid_sample)
 254   2                            { 
 255   3                                      LOOP2:
 256   3                                      step--;
 257   3                                      if( step == -1)
 258   3                                      step = 3;
 259   3                                      P1 = stepper_code[step];
 260   3                                      msdelay(3000);
 261   3                                inputting();
 262   3                                      present_sample = x;
 263   3                     
 264   3                                      
 265   3      
 266   3      
 267   3      
 268   3      
 269   3      if(present_sample > previous_sample)
 270   3                                      {
 271   4      previous_sample = present_sample;
 272   4                                              goto  LOOP2;
 273   4                                      }
 274   3                              else
 275   3                                      {
 276   4                                               step++;
 277   4                                              if( step > 3)
 278   4                                              step = 0;
 279   4                                              P1 = stepper_code[step];
 280   4                                              msdelay(3000);
 281   4                                      inputting();
 282   4                                              previous_sample = x;
 283   4                                      }  
 284   3      
 285   3                                }
 286   2                      
 287   2                        msdelay(10000);
 288   2              } 
 289   1      }
 290          
 291          
 292          
 293          
 294          
 295          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    523    ----
   CONSTANT SIZE    =     68    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
C51 COMPILER V9.06   SOLAR                                                                 04/19/2015 18:45:07 PAGE 6   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
